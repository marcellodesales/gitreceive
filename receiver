#!/usr/bin/env python3

import os
import sys
import subprocess

# Provided by the caller
repo = sys.argv[1]
sha = sys.argv[2]
username = sys.argv[3]
fingerprint = sys.argv[4]
ref = sys.argv[5]

label = ""
label_type = ""

if "heads" in ref:
  label = ref.replace("refs/heads/", "")
  label_type = "branch"

else:
  label = ref.replace("refs/tags/", "")
  label_type = "tag"

print("")
print("")
print("######## Git Receiver - by marcello.desales@gmail.com ##########")
print("")
print("==> repository: {}".format(repo))
print("==> label: {} '{}'".format(label_type, label))
print("==> revision: {}".format(sha))
print("==> username: {}".format(username))
print("==> fingerprint: {}".format(fingerprint))
print("")
print("==> Unpacking repo...")

# Where we can place the files from this commit
user_files_dir = "/tmp/build/{}/{}".format(username, sha)

# Untar the files received
# https://stackoverflow.com/questions/8659275/how-to-store-the-result-of-an-executed-shell-command-in-a-variable-in-python
cmd = "mkdir -p {} && cat | tar -x -C {}".format(user_files_dir, user_files_dir)
output = subprocess.check_output(cmd, shell=True)

# List the files in the idr
for root, directories, filenames in os.walk(user_files_dir):
  if len(directories) == 0:
    for filename in filenames:
      print("-> {}".format(filename))

  else:
    for directory in directories:
      for filename in filenames:
        full_file = os.path.join(directory, filename)
        print("-> {}".format(full_file))

print("")
print("Receiving done...")
print("")
